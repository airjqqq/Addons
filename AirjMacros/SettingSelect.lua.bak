local parent = AirjMacros
local mod = {}
local AceGUI = LibStub("AceGUI-3.0")
local f2n = {}
FillLocalizedClassList(f2n)
local specId = {}
for i = 1,300 do
	local _,specName,_,_,_,_,class = GetSpecializationInfoByID(i)
	if class then
		specId[class] = specId[class] or {}
		specId[class][i] = specName
	end
end

local function SetDescription(widget,desc)
	widget:SetCallback("OnEnter",function(widget) 
		GameTooltip:SetOwner(widget.frame, "ANCHOR_TOPRIGHT");
		GameTooltip:AddLine(desc, 1, 1, 1, 1);
		GameTooltip:Show();
		GameTooltip:SetFrameLevel(50);
	end)
	widget:SetCallback("OnLeave", function(widget) 
		GameTooltip:Hide()
	end)
end
function mod:GetCurrentData()
	local macro = parent.macroDataBaseArray[self.currentDataIndex]
	return macro
end

function mod:CreateMainConfigGroup()
	local macro = {}
	local group = AceGUI:Create("ScrollFrame")
	group:SetLayout("Flow")
	local macroConfigWidgets = {
		{
			key = "class",
			widget = "Dropdown",
			text = "职业",
			desc = "",
			width = 160,
		},
		{
			key = "spec",
			widget = "Dropdown",
			text = "专精",
			desc = "",
			width = 160,
		},
		{
			key = "note",
			widget = "EditBox",
			text = "注释",
			desc = "会显示在左面的列表中,方便查找",
			width = 160,
		},
		{
			key = "heading1",
			widget = "SimpleGroup",
			text = "",
			desc = "",
			width = "fill",
		},
		{
			key = "autoSwap",
			widget = "CheckBox",
			text = "自动选择",
			desc = "",
			width = 160,
		},
		{
			key = "select",
			widget = "Button",
			text = "选中",
			desc = "",
			width = 160,
		},
		{
			key = "send",
			widget = "Button",
			text = "发送",
			desc = "",
			width = 160,
		},
		{
			key = "heading1",
			widget = "SimpleGroup",
			text = "",
			desc = "",
			width = "fill",
		},
		{
			key = "new",
			widget = "Button",
			text = "新建",
			desc = "",
		},
		{
			key = "inport",
			widget = "Button",
			text = "导入",
			desc = "",
		},
		{
			key = "export",
			widget = "Button",
			text = "导出",
			desc = "",
		},
		{
			key = "delete",
			widget = "Button",
			text = "删除",
			desc = "按住Ctrl",
		},
		{
			key = "heading1",
			widget = "SimpleGroup",
			text = "",
			desc = "",
			width = "fill",
		},
		{
			key = "info",
			widget = "Label",
			text = "",
			width = "fill",
			desc = "",
		},
		{
			key = "inst",
			widget = "MultiLineEditBox",
			text = "",
			width = "fill",
			desc = "",
		},
	}
	
	for i,v in ipairs(macroConfigWidgets) do 
		local widget = AceGUI:Create(v.widget)
		if widget.SetLabel then
			widget:SetLabel(v.text)
		elseif widget.SetText then
			widget:SetText(v.text)
		end
		if v.min and v.max and v.step and widget.SetSliderValues then
			widget:SetSliderValues(v.min,v.max,v.step)
		end
		SetDescription(widget,v.desc)
		if v.width == "fill" then
			widget:SetFullWidth(true)
		else
			widget:SetWidth(v.width or 80)
		end
		group:AddChild(widget)
		group[v.key] = widget
	end
	
	group.class:SetList(f2n)
	group.class:SetCallback("OnValueChanged",function(widget,event,key)
		local currentData = self:GetCurrentData()
		currentData.class = key
		local specList = specId[key]
		group.spec:SetText("")
		group.spec:SetList(specList)
		currentData.spec = nil
		self:UpdateDataTreeGroup()
	end)
	group.spec:SetCallback("OnValueChanged",function(widget,event,key)
		local currentData = self:GetCurrentData()
		currentData.spec = key
		self:UpdateDataTreeGroup()
	end)
	group.note:SetCallback("OnEnterPressed",function(widget,event,text) 
		if text == "" then
			text = nil
		end
		local currentData = self:GetCurrentData()
		currentData.note = text 
		self:UpdateDataTreeGroup()
	end)
	
	group.select:SetCallback("OnClick", function(widget,event)
		parent:SelectDataDB(self.currentDataIndex)
		self:UpdateDataTreeGroup()
	end)
	group.autoSwap:SetCallback("OnValueChanged", function(widget,event,key)
		local currentData = self:GetCurrentData()
		currentData.autoSwap = key and true or nil;
	end)
	group.send:SetCallback("OnClick", function(widget,event)
		local currentData = self:GetCurrentData()
		parent:SendComm(currentData)
	end)
	group.new:SetCallback("OnClick", function(widget,event)
		self.currentDataIndex = (self.currentDataIndex or 0) + 1
		local rdb = {
			macroArray = {},
			scriptArray = {},
		}
		self:NewData(rdb)
	end)
	group.inport:SetCallback("OnClick", function(widget,event)
		parent.inportStatus = {1,1,self.currentDataIndex}
		parent:Inport()
	end)
	
	group.export:SetCallback("OnClick", function(widget,event)
		local currentData = self:GetCurrentData()
		parent:Export("macrokeys",currentData)
	end)

	group.delete:SetCallback("OnClick", function(widget,event)
		if not IsControlKeyDown() then return end
		tremove(parent.macroDataBaseArray,self.currentDataIndex)
		if self.currentDataIndex < parent.selectedIndex then
			parent.selectedIndex = parent.selectedIndex - 1
		elseif self.currentDataIndex == parent.selectedIndex then
			parent:SelectDataDB(parent.selectedIndex - 1)
		end
		if self.currentDataIndex and self.currentDataIndex>1 then
			self.currentDataIndex = self.currentDataIndex - 1
		end
		self:UpdateDataTreeGroup()
	end)
	group.inst:SetCallback("OnEnterPressed",function(widget,event,text)
		local currentData = self:GetCurrentData()
		if text == "" then
			text = nil
		end
		currentData.inst = text 
	end)
	
	self.mainConfigGroup = group
end

function mod:UpdateMainConfigGroup()
	local group = self.mainConfigGroup
	local macro = self:GetCurrentData() or {}
	group.class:SetValue(macro.class)
	group.class:SetDisabled(macro.isDefault)
	local specList = specId[macro.class] or {}
	group.spec:SetList(specList)
	if specList[macro.spec] then
		group.spec:SetValue(macro.spec)
	else
		group.spec:SetText("")
	end
	group.spec:SetDisabled(macro.isDefault)
	group.note:SetText(macro.note)
	group.note:SetDisabled(macro.isDefault)
	group.select:SetDisabled(parent.selectedIndex == self.currentDataIndex)
	group.autoSwap:SetValue(macro.autoSwap)
	group.delete:SetDisabled(macro.isDefault)
	group.inst:SetDisabled(macro.isDefault)
	do 
		local infoText = {}
		local num = 0
		for k,v in pairs(macro.macroArray or {}) do
			num = num + 1
		end
		tinsert(infoText, num.."个按键")
		local targets = {}
		for k,v in pairs(macro.spellArray or {}) do
			local tarmin, tarmax = v.tarmin, v.tarmax
			if tarmin then
				targets[tarmin] = true
			end
			if tarmax then
			--	targets[tarmax] = true
			end
		end
		local targetNum = {}
		for k,v in pairs(targets) do
			tinsert(targetNum,k)
		end
		tinsert(infoText, "支持目标数:"..table.concat(targetNum,", "))
		group.info:SetText(table.concat(infoText,"\n"))
	end
	group.inst:SetText(macro.inst or "")
end
function mod:UpdateDataTreeGroup()
	local mainGroup = self.mainGroup
	local macroDataBaseArray = parent.macroDataBaseArray
	local tree = {}
	local texture = [[Interface\Glues\CharacterCreate\UI-CharacterCreate-Classes]]
	for i,v in ipairs(macroDataBaseArray) do
		local class = v.class
		local _, specName, _, icon = GetSpecializationInfoByID(v.spec or 0)
		local note = v.note or (v.isDefault and "默认")
		local name = {}
		tinsert(name,f2n[class])
		tinsert(name,specName)
		tinsert(name,note)
		name = table.concat(name," - ")
		if not name or name == "" then
			name = "未定义"
		end
		if parent.selectedIndex == i then
			name = "[|cff00ff00"..name.."|r]"
		end
		tinsert(tree,{value = i,icon = icon,text = name})
	end
	mainGroup:SetTree(tree)
	mainGroup:Select(self.currentDataIndex)
	self:UpdateMainConfigGroup()
end

function mod:NewData(macro,index)
	if not index then 
		index = self.currentDataIndex 
	else
		self.currentDataIndex = index
	end
	macro.isDefault = nil
	tinsert(parent.macroDataBaseArray,index,macro)
	print(index)
	if index < (parent.selectedIndex or 0) then
		parent.selectedIndex = parent.selectedIndex + 1
	elseif index == parent.selectedIndex then
		parent:SelectDataDB(parent.selectedIndex + 1)
	end
	self:UpdateDataTreeGroup()
end

function mod:DataSelect()
	self.currentDataIndex = self.currentDataIndex or 0
	local mainGroup = self.mainGroup
	if not mainGroup then
		mainGroup = AceGUI:Create("TreeGroup")
		mainGroup:SetTreeWidth(240,true)
		mainGroup:SetLayout("Flow")
		mainGroup:SetCallback("OnGroupSelected",function(widget,event,uniquevalue)
			self.currentDataIndex = uniquevalue
			self:UpdateMainConfigGroup()
		end)
		self.mainGroup = mainGroup
	end
	if not self.mainConfigGroup then
		self:CreateMainConfigGroup()
		mainGroup:SetLayout("Fill")
		mainGroup:AddChild(self.mainConfigGroup)
	end
	self:UpdateDataTreeGroup()
	parent:SelectTab(mainGroup)
end

function parent:DataSelect()
	mod:DataSelect()
end

parent:RegisterTab("DataSelect","循环选择",mod)